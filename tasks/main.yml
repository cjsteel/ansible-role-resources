--- # roles/resources/tasks/main.yml

- name: Load OS specific variables
  include_vars: "{{ fact_role_path }}/vars/{{ ansible_os_family | lower }}.yml"
  tags:
    - resources
    - install

- name: "Debug variable values"
  include: "{{ fact_role_path }}/tasks/debug.yml"
  when: resources_debug

- name: Run any OS specific tasks
  include: "{{ fact_role_path }}/tasks/{{ ansible_os_family | lower }}.yml"

# Debug remote resources

- name: "debug value of resources_on_remote"
  debug: var=resources_on_remote

# Debug local resources

- name: "debug value of resources_on_local"
  debug: var=resources_on_local

# Ensure for local resources

## Ensure for directories on local

- name: "ensure for local directories"
  become: '{{ resources_controller_user }}'
  delegate_to: 127.0.0.1
  file:
    state   : '{{ item.value.state   | default("directory") }}'
    path    : '{{ item.value.path    | default(mandatory) }}'
    owner   : '{{ item.value.owner   | default(omit) }}'
    group   : '{{ item.value.group   | default(omit) }}'
    mode    : '{{ item.value.mode    | default(omit) }}'
    recurse : '{{ item.value.recurse | default(omit) }}'
  with_dict: '{{ resources_on_local }}'
  when: item.value.state is defined and item.value.state == 'directory' or item.value.state is defined and item.value.state =='absent'

## Ensure for clones on local

- name: "Manage local git repository clones"
  become: '{{ resources_controller_user }}'
  delegate_to: 127.0.0.1
  git:
    repo: "{{ item.value.repo }}"
    dest: "{{ item.value.dest }}"
    umask: '{{ item.value.umask  | default(omit) }}'
    update: yes
    clone: "{{ item.value.clone | default(resources_default_clone) }}"
    version: "{{ item.value.version | default(resources_default_clone_version) }}"
  with_dict: '{{ resources_on_local }}'
  when: item.value.clone is defined

## Ensure for downloads on local

- name: "Download file at url to local"
  become: '{{ resources_controller_user }}'
  delegate_to: 127.0.0.1
  get_url:
    url: '{{ item.value.url }}'
    dest: '{{ item.value.dest }}'
    owner: '{{ item.value.owner | default(omit) }}'
    group: '{{ item.value.group | default(omit) }}'
    mode: '{{ item.value.mode  | default(omit) }}'
    force: '{{ item.value.force  | default(omit) }}'
    checksum : '{{ item.value.checksum | default(omit) }}'
  with_dict: '{{ resources_on_local }}'
  when: item.value.resource_type is defined and item.value.resource_type == 'url'

# Ensure for copy of file on local

- name: 'Ensure for copy of file on local'
  become: '{{ resources_controller_user }}'
  delegate_to: 127.0.0.1
  copy:
    src: "{{ item.value.src }}"
    dest: "{{ item.value.dest }}"
    owner: "{{ item.value.owner | default(resources_default_local_owner) }}"
    group: "{{ item.value.group | default(resources_default_local_group) }}"
    mode : "{{ item.value.mode | default(resources_default_file_mode) }}"
    force: "{{ item.value.force | default(resources_default_file_force) }}"
  with_dict: '{{ resources_on_local }}'
  when: item.value.state is defined and item.value.state == 'copy'

## Template files to local

- name: "Template files to local"
  become: '{{ resources_controller_user }}'
  delegate_to: 127.0.0.1
  template:
    src: "{{ item.value.src }}"
    dest: "{{ item.value.dest }}"
    owner: "{{ item.value.owner | default(resources_default_local_owner) }}"
    group: "{{ item.value.group | default(resources_default_local_group) }}"
    mode: "{{ item.value.mode | default(resources_default_file_mode) }}"
  with_dict: '{{ resources_on_local }}'
  when: item.value.state is defined and item.value.state == 'template'

# Ensure for touch of local files

- name: "Ensure touch to remote file(s)"
  become: '{{ resources_controller_user }}'
  delegate_to: 127.0.0.1
  file:
    path: "{{ item.value.path }}"
    state: "{{ item.value.state }}"
    owner: "{{ item.value.owner | default(resources_default_local_owner) }}"
    group: "{{ item.value.group | default(resources_default_local_group) }}"
    mode: "{{ item.value.mode | default(resources_default_file_mode) }}"
  with_dict: '{{ resources_on_local }}'
  when: item.value.state is defined and item.value.state == 'touch'

## Blockinfile in local files

- name: "Ensure for a block of text in a remote file"
  become: '{{ resources_controller_user }}'
  delegate_to: 127.0.0.1
  blockinfile:
    destfile:  "{{ item.value.path }}"
    owner: "{{ item.value.owner | default(resources_default_local_owner) }}"
    group: "{{ item.value.group | default(resources_default_local_group) }}"
    mode: "{{ item.value.mode | default(resources_default_file_mode) }}"
    marker: "{{ item.marker | default(resources_default_blockinfile_marker) }}"
    marker: "{{ item.value.marker | default(resources_default_blockinfile_marker) }}"
    insertafter: "{{ item.value.insertafter | default(resources_default_blockinfile_insertafter) }}"
    block: "{{ item.value.block }}"
    state: "{{ item.value.state  | default(resources_default_blockinfile_state) }}"
  with_dict: '{{ resources_on_local }}'
  when: item.value.type is defined and item.value.type == 'blockinfile'

## Standard local symbolic links

- name: "Manage local standard symbolic link"
  become: '{{ resources_controller_user }}'
  delegate_to: 127.0.0.1
  file:
    src  : '{{ item.value.src }}'
    dest : '{{ item.value.dest }}'
    state: '{{ item.value.state }}'
    owner: '{{ item.value.owner | default(resources_default_local_owner) }}'
    group: '{{ item.value.group | default(resources_default_local_group) }}'
    mode : '{{ item.value.mode | default(resources_default_link_mode) }}'
    force: '{{ item.value.force | default(resources_default_link_force) }}'
  with_dict: '{{ resources_on_local }}'
  when: item.value.state is defined and item.value.state == 'link'

## Relative local symbolic links

- name: "Manage local relative symbolic links"
  become: '{{ resources_controller_user }}'
  delegate_to: 127.0.0.1
  command: 'ln -frs {{ item.value.link_target }} {{ item.value.link_name }}'
  args:
    chdir: '{{ item.value.link_dir }}'
  with_dict: '{{ resources_on_local }}'
  when: item.value.state is defined and item.value.state == 'relative_link'

# Ensure for remote resources

## Ensure for directories on remote

- name: "ensure for remote directories"
  become: true
  file:
    state   : '{{ item.value.state   | default("directory") }}'
    path    : '{{ item.value.path    | default(mandatory) }}'
    owner   : '{{ item.value.owner   | default(ensure_dirs_default_remote_owner) }}'
    group   : '{{ item.value.group   | default(ensure_dirs_default_remote_group) }}'
    mode    : '{{ item.value.mode    | default(ensure_dirs_default_remote_directory_mode) }}'
    recurse : '{{ item.value.recurse | default(omit) }}'
  with_dict: '{{ resources_on_remote }}'
  when: item.value.state is defined and item.value.state == 'directory' or item.value.state is defined and item.value.state =='absent'

## Ensure for clones on remote

- name: "Manage remote git repository clones"
  become: true
  git:
    repo: "{{ item.value.repo }}"
    dest: "{{ item.value.dest }}"
    umask: '{{ item.value.umask  | default(omit) }}'
    update: yes
    clone: "{{ item.value.clone }}"
    version: "{{ item.value.version | default(omit) }}"
  with_dict: '{{ resources_on_remote }}'
  when: item.value.clone is defined

## Ensure for downloads on remote

- name: "Download file at url to remote"
  become: true
  get_url:
    url: '{{ item.value.url }}'
    dest: '{{ item.value.dest }}'
    owner: '{{ item.value.owner | default(omit) }}'
    group: '{{ item.value.group | default(omit) }}'
    mode: '{{ item.value.mode  | default(omit) }}'
    force: '{{ item.value.force  | default(omit) }}'
    checksum : '{{ item.value.checksum | default(omit) }}'
  with_dict: '{{ resources_on_remote }}'
  when: item.value.resource_type is defined and item.value.resource_type == 'url'

# Ensure for copy of file on remote

- name: 'Ensure for copy of file on remote'
  become: true
  copy:
    src: "{{ item.value.src }}"
    dest: "{{ item.value.dest }}"
    owner: "{{ item.value.owner | default(resources_default_remote_owner) }}"
    group: "{{ item.value.group | default(resources_default_remote_group) }}"
    mode : "{{ item.value.mode | default(resources_default_file_mode) }}"
    force: "{{ item.value.force | default(resources_default_file_force) }}"
  with_dict: '{{ resources_on_remote }}'
  when: item.value.state is defined and item.value.state == 'copy'

## Template files to remote

- name: "Template files to remote"
  become: true
  template:
    src: "{{ item.value.src }}"
    dest: "{{ item.value.dest }}"
    owner: "{{ item.value.owner | default(resources_default_remote_owner) }}"
    group: "{{ item.value.group | default(resources_default_remote_group) }}"
    mode: "{{ item.value.mode | default(resources_default_file_mode) }}"
  with_dict: '{{ resources_on_remote }}'
  when: item.value.state is defined and item.value.state == 'template'

## Ensure for touch of remote files

- name: "Ensure touch to remote file(s)"
  become: true
  file:
    path: "{{ item.value.path }}"
    state: "{{ item.value.state }}"
    owner: "{{ item.value.owner | default(resources_default_remote_owner) }}"
    group: "{{ item.value.group | default(resources_default_remote_group) }}"
    mode: "{{ item.value.mode | default(resources_default_file_mode) }}"
  with_dict: '{{ resources_on_remote }}'
  when: item.value.state is defined and item.value.state == 'touch'

## Blockinfile in remote files

- name: "Ensure for a block of text in a remote file"
  become: true
  blockinfile:
    destfile:  "{{ item.value.path }}"
    owner: "{{ item.value.owner | default(resources_default_remote_owner) }}"
    group: "{{ item.value.group | default(resources_default_remote_group) }}"
    mode: "{{ item.value.mode | default(resources_default_file_mode) }}"
    marker: "{{ item.value.marker | default(resources_default_blockinfile_marker) }}"
    insertafter: "{{ item.value.insertafter | default(none) }}"
    block: "{{ item.value.block }}"
    state: "{{ item.value.state  | default(resources_default_blockinfile_state) }}"
  with_dict: '{{ resources_on_remote }}'
  when: item.value.type is defined and item.value.type == 'blockinfile'

## Standard remote symbolic links

- name: "Manage remote standard symbolic links"
  become: true
  file:
    src  : '{{ item.value.src }}'
    dest : '{{ item.value.dest }}'
    state: '{{ item.value.state }}'
    owner: '{{ item.value.owner | default(resources_default_remote_owner) }}'
    group: '{{ item.value.group | default(resources_default_remote_group) }}'
    mode : '{{ item.value.mode | default(resources_default_link_mode) }}'
    force: '{{ item.value.force | default(resources_default_link_force) }}'
  with_dict: '{{ resources_on_remote }}'
  when: item.value.state is defined and item.value.state == 'link'

## Relative remote symbolic links

- name   : "Manage remote relative symbolic links"
  become: true
  command: 'ln -frs {{ item.value.link_target }} {{ item.value.link_name }}'
  args:
    chdir: '{{ item.value.link_dir }}'
  with_dict: '{{ resources_on_remote }}'
  when: item.value.state is defined and item.value.state == 'relative_link'

