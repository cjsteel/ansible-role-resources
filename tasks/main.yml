--- # roles/resources/tasks/main.yml

- name: Load OS specific variables
  include_vars: "{{ fact_role_path }}/vars/{{ ansible_os_family | lower }}.yml"
  tags:
    - resources
    - install

- name: "Debug variable values"
  include: "{{ fact_role_path }}/tasks/debug.yml"
  when: resources_debug

- name: Run any OS specific tasks
  include: "{{ fact_role_path }}/tasks/{{ ansible_os_family | lower }}.yml"

# Debug remote resources

- name: "debug value of resources_on_remote"
  debug: var=resources_on_remote

# Debug local resources

- name: "debug value of resources_on_local"
  debug: var=resources_on_local

# Ensure for remote and local resources

## Ensure for directories on remote

- name: "ensure for remote directories"
  become: '{{ item.value.owner }}'
#  become: '{{ resources_deployment_user }}'
  file:
    state   : '{{ item.value.state   | default("directory") }}'
    path    : '{{ item.value.path    | default(mandatory) }}'
    owner   : '{{ item.value.owner   | default(ensure_dirs_default_remote_owner) }}'
    group   : '{{ item.value.group   | default(ensure_dirs_default_remote_group) }}'
    mode    : '{{ item.value.mode    | default(ensure_dirs_default_remote_directory_mode) }}'
    recurse : '{{ item.value.recurse | default(omit) }}'
  with_dict: '{{ resources_on_remote }}'
  when: item.value.state is defined and item.value.state == 'directory' or item.value.state is defined and item.value.state =='absent'


## Ensure for directories on local

- name: "ensure for local directories"
  become: '{{ item.value.owner }}'
  delegate_to: 127.0.0.1
  file:
    state   : '{{ item.value.state   | default("directory") }}'
    path    : '{{ item.value.path    | default(mandatory) }}'
    owner   : '{{ item.value.owner   | default(omit) }}'
    group   : '{{ item.value.group   | default(omit) }}'
    mode    : '{{ item.value.mode    | default(omit) }}'
    recurse : '{{ item.value.recurse | default(omit) }}'
  with_dict: '{{ resources_on_local }}'
  when: item.value.state is defined and item.value.state == 'directory' or item.value.state is defined and item.value.state =='absent'

## Ensure for clones on remote

- name: "Manage remote git repository clones"
  become: '{{ item.value.become }}'
  git:
    repo: "{{ item.value.repo }}"
    dest: "{{ item.value.dest }}"
    umask: '{{ item.value.umask  | default(omit) }}'
    update: yes
    clone: "{{ item.value.clone | default(resources_default_clone) }}"
    version: "{{ item.value.version | default(resources_default_clone_version) }}"
  with_dict: '{{ resources_on_remote }}'
  when: item.value.clone is defined

## Ensure for clones on local

- name: "Manage local git repository clones"
  become: '{{ item.value.become }}'
  delegate_to: 127.0.0.1
  git:
    repo: "{{ item.value.repo }}"
    dest: "{{ item.value.dest }}"
    umask: '{{ item.value.umask  | default(omit) }}'
    update: yes
    clone: "{{ item.value.clone | default(resources_default_clone) }}"
    version: "{{ item.value.version | default(resources_default_clone_version) }}"
  with_dict: '{{ resources_on_local }}'
  when: item.value.clone is defined

## Ensure for downloads on remote

- name: "Download file at url to remote"
  become: '{{ item.value.owner }}'
  get_url:
    url: '{{ item.value.url }}'
    dest: '{{ item.value.dest }}'
    owner: '{{ item.value.owner | default(omit) }}'
    group: '{{ item.value.group | default(omit) }}'
    mode: '{{ item.value.mode  | default(omit) }}'
    force: '{{ item.value.force  | default(omit) }}'
    checksum : '{{ item.value.checksum | default(omit) }}'
  with_dict: '{{ resources_on_remote }}'
  when: item.value.resource_type is defined and item.value.resource_type == 'url'

## Ensure for downloads on local

- name: "Download file at url to local"
  become: '{{ item.value.owner }}'
  delegate_to: 127.0.0.1
  get_url:
    url: '{{ item.value.url }}'
    dest: '{{ item.value.dest }}'
    owner: '{{ item.value.owner | default(omit) }}'
    group: '{{ item.value.group | default(omit) }}'
    mode: '{{ item.value.mode  | default(omit) }}'
    force: '{{ item.value.force  | default(omit) }}'
    checksum : '{{ item.value.checksum | default(omit) }}'
  with_dict: '{{ resources_on_local }}'
  when: item.value.resource_type is defined and item.value.resource_type == 'url'
  
